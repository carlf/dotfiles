#+STARTUP: showall
#+STARTUP: hidestars
#+STARTUP: odd

* Start the emacs server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

* Path munging
  A few things (mostly pyenv) depend on having a complete path and
  some of these things do to need to live in the zsh path so I'd
  rather not pollute it with more cruft.
#+BEGIN_SRC emacs-lisp
  (defun add-to-path (path)
      (progn
        (add-to-list 'exec-path path)
        (setenv "PATH" (concat path ":" (getenv "PATH")))))
  (add-to-path "/home/cflippin/bin")
#+END_SRC

* Stash all the custom stuff in custom.el
  Some stuff, notably org mode agenda stuff and the installed packages
  has to line in customize variables. This stuff mucks up the init.el
  so we stash it in a separate file
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

* Make backups nice and neat
  Emacs likes to litter the filesystem with tons of backup files. We
  stash them away in a nice invisible directory
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t
   backup-directory-alist '(("." . "~/.saves"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)
#+END_SRC

* Clean up trailing whitespace
  Trailing whitespace is crappy and sometimes break things. Remove it
  with a before-save-hook.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Use xdg-open
  I'm not clear at all on why this is not default behavior. It's
  standard most everywhere but emacs wants to be a special little
  snowflake. This opens URLs with xdg-open which should usually do the
  right thing.
#+BEGIN_SRC emacs-lisp
  (defun my/xdg-open-shim (url &optional new-window)
    "Open URL in xdg-open.  The argument NEW-WINDOW is ignored."
    (start-process (concat "xdg-open " url) nil "xdg-open" url))

  (setq browse-url-browser-function 'my/xdg-open-shim)
#+END_SRC

* Pretty things up a little
  Lots of stuff in here. Loading the [[https://github.com/bbatsov/solarized-emacs][solarized-dark theme]], turning off
  most of the UI, turning on [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]], and disabling the
  variable size fonts in org mode that give me the fits.
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (set-frame-font "Input Mono-10:weight=light")
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (load-theme 'gruvbox-dark-medium t))

  (use-package smart-mode-line
    :ensure t
    :config
    (sml/setup))
#+END_SRC

* Dashboard
  This loads [[https://github.com/rakanalh/emacs-dashboard][emacs-dashboard]] which makes a nice easy to use splash
  page when emacs starts up. It's a little like the spacemacs splash
  page.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-items '((recents . 10)
                            (projects . 10)
                            (agenda . 10)))
    (dashboard-setup-startup-hook))
#+END_SRC

* Load magit
  [[https://magit.vc/][Magit]] is mandatory. Don't leave home without it. Also include
  [[https://github.com/vermiculus/magithub][magithub]].
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    :config
    (setq vc-handled-backends nil))
  (use-package magithub
    :after magit
    :ensure t
    :config (magithub-feature-autoinject t))
#+END_SRC

* Set SSH_AUTH_SOCK
  This allows tramp and git to work with my gpg based ssh keys
#+BEGIN_SRC emacs-lisp
  (defun string-trim-final-newline (string)
    (let ((len (length string)))
      (cond
        ((and (> len 0) (eql (aref string (- len 1)) ?\n))
         (substring string 0 (- len 1)))
        (t string))))
  (setenv "SSH_AUTH_SOCK" (string-trim-final-newline
          (shell-command-to-string "/usr/bin/gpgconf --list-dirs agent-ssh-socket")))
#+END_SRC

* Load smartparens
  [[https://github.com/Fuco1/smartparens][Smartparens]] in strict mode makes like with lisp and lispy things
  much nicer. No more wondering if your braces are matched. It's
  impossible to unbalance them. More documentation [[https://ebzzry.io/en/emacs-pairs/][here]].
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-strict-mode 1)
    (smartparens-strict-mode)
    (require 'smartparens-config)
    (show-smartparens-global-mode 1))
#+END_SRC

* Fancy searchy stuff
  I'm firmly entrenched in the counsel/ivy/projectile world. Search
  all the things. Autocompletes everywhere. Of particular note is the
  shortcut for ripgrep which is crazy fast. I change the search
  command to include dotfiles because sometimes you need that. For
  more info on ivy, counsel, and swiper, see [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][here]].
*** Load [[https://github.com/abo-abo/swiper#ivy][ivy]] itself.
    Ivy is the general completion framework used by the other stuff
    below. The ivy config is pulled straight from the README.md.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume))
#+END_SRC

*** Load [[https://github.com/abo-abo/swiper#swiper][swiper]].
    Swiper is the isearch replacement that uses ivy for
    autocomplete. It's fast and it's efficient.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (global-set-key "\C-s" 'swiper))
#+END_SRC

*** Load [[https://github.com/abo-abo/swiper#counsel][counsel]].
    Counsel wraps a bunch of functions with versions made to work well
    with ivy.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (setq counsel-rg-base-command "rg -i --no-heading --line-number --hidden --color never %s .")
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
#+END_SRC

*** Load [[http://projectile.readthedocs.io/en/latest/][projectile]] and [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
    Projectile makes it easy to jump around between projects and to
    jump between files in a project. You hit something like C-c p f
    and you get a searchable list of every file in the project. The
    addition of counsel-projectile makes this all work within ivy just
    like everything else so it's nice and neat and most of the
    shortcuts work consistently.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-on)
    (global-set-key (kbd "C-c p s r") 'counsel-projectile-rg))
#+END_SRC

* Rebind yes-or-no-p to y-or-n-p
  This is just a quality of life thing. It replaces the requirement
  for typing y-e-s with just y.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Include yasnippet
  The [[https://github.com/joaotavora/yasnippet][yasnippet]] library makes it easy to automate a log of boilerplate
  with smiple template expansion.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config (yas-global-mode 1))
#+END_SRC

* Include avy and ace-window
  For quick navigation, [[https://github.com/abo-abo/avy][avy]] is very fast and very intuitive. For
  windows, [[https://github.com/abo-abo/ace-window][ace-window]] does the same making short keystrokes to do big
  things.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (global-set-key (kbd "C-:") 'avy-goto-char)
    (global-set-key (kbd "C-'") 'avy-goto-char-timer))

  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "M-p") 'ace-window))
#+END_SRC

* which-key
  The [[https://github.com/justbur/emacs-which-key][which-key]] package makes handy completion buffers as you enter
  key chords allowing you to find things more easily.  (use-package
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

* Load undo-tree and browse-kill-ring
  The [[http://www.dr-qubit.org/undo-tree/undo-tree.el][undo-tree]] module allows you to have a complete tree of changes
  to navigate while undoing. The [[https://github.com/browse-kill-ring/browse-kill-ring][browse-kill-ring]] module tracks your
  kill ring and lets you explicitly choose the what you want to yank
  rather than cycling through the ring.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode))

  (use-package browse-kill-ring
    :ensure t
    :config
    (browse-kill-ring-default-keybindings))
#+END_SRC

* Flycheck
  [[http://www.flycheck.org/en/latest/][Flycheck]] makes automatically testing your syntax and such very
  simple.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

* Load puppet-mode on demand
  The puppet-mode module makes life with puppet much easier. Of
  particular note is the handy align arrows functionality available
  with C-c C-a.
#+BEGIN_SRC emacs-lisp
  (use-package puppet-mode
    :ensure t
    :mode ("\\.pp\\'" . puppet-mode)
    :interpreter ("puppet" . puppet-mode))
#+END_SRC

* Load go-mode
  The go-mode module is very nice. In particular, this is rigged such
  that it will run gofmt on save which keeps things nice and neat.
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :mode ("\\.go\\'" . go-mode)
    :interpreter ("go" . go-mode)
    :config
    (add-hook 'before-save-hook #'gofmt-before-save))
#+END_SRC

* Load yaml-mode
  This just gets me some nice syntax highlighting for yaml.
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode ("\\.yaml'" . yaml-mode)
    :interpreter ("yaml" . yaml-mode))
#+END_SRC

* Org-Mode
  Org mode is the swiss army knife of my workflow. My general
  structure is having a todo.org with all tasks and an inbox for
  capture. I log times on create and complete. There's a minimal
  capture template for TODOs that takes out some of the trickery in
  the defaults.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :defines org-capture-templates
    :config
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (setq org-refile-targets
          '((org-agenda-files :maxlevel . 2))
          org-export-with-sub-superscripts nil
          org-directory "~/Documents/org"
          org-default-notes-file "inbox.org"
          org-log-done 'time
          org-capture-templates '(("t" "Todo" entry (file "")
                                   "* TODO %?\n  CREATED: %T"))
          org-src-fontify-natively t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     (append org-babel-load-languages
             '((sh . t)
               (python . t)))))
#+END_SRC

* AUCTeX
  This venerable TeX/LaTeX mode makes typsetting much easier
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
    :defer t)
#+END_SRC

* Dired+
  This package extends dired in a variety of ways. More information
  [[http://wikemacs.org/wiki/Dired%252B][here]].
#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :ensure t)
#+END_SRC

* Ledger mode
  This package adds support for ledger for managing
  finances. Documentation can be found [[https://github.com/ledger/ledger-mode][here]].
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t)
  (use-package flycheck-ledger
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC

* mu4e
  I switched to this from GNUS because it's faster and more flexible.
#+BEGIN_SRC emacs-lisp
  (require 'mu4e)
  (setq mu4e-maildir (expand-file-name "~/Mail/photocarl")
        mu4e-sent-folder "/Sent"
        mu4e-drafts-folder "/Drafts"
        mu4e-trash-folder "/Trash"
        mu4e-get-mail-command "mbsync -a"
        mu4e-use-fancy-chars nil
        mu4e-change-filenames-when-moving t
        mu4e-maildir-shortcuts '(("/INBOX" . ?i)
                                 ("/Archive" . ?a)
                                 ("/Sent" . ?s)
                                 ("/Spam" . ?j)))
#+END_SRC

* Markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

* TLDR mode
  This mode allows searching the simplified man pages [[https://github.com/tldr-pages/tldr][here]] giving you
  more condensed and useful information for various man pages.
#+BEGIN_SRC emacs-lisp
  (use-package tldr
    :ensure t)
#+END_SRC

* restclient
  This lets you use emacs as a fancy REST client. Docs [[https://github.com/pashky/restclient.el][here]].
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
#+END_SRC

* Pyenv
  This allows easily switching the virtualenv selected by pyenv.
#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode
    :ensure t
    :config
    (add-to-path (expand-file-name "~/.pyenv/libexec")))
#+END_SRC

* SLIME
  The SLIME list interaction mode is awesome
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC
